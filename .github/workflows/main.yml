name: CI/CD Pipeline

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

env:
  DEPS_STAMP: "0" # Increment this to force rebuild of dependency images

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: |
          pip install -q pre-commit
          pre-commit run --show-diff-on-failure --color=always --all-files

  lint-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: compose/local/readability/Dockerfile
          ignore: DL3008,DL3006

      - name: Run hadolint (production django)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: compose/production/django/Dockerfile
          ignore: DL3008,DL3006

      - name: Run hadolint (local django)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: compose/local/django/Dockerfile
          ignore: DL3008,DL3006

      - name: Run hadolint (nginx)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: compose/production/nginx/Dockerfile
          ignore: DL3008,DL3006

      - name: Run hadolint (frontend)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: frontend/Dockerfile
          ignore: DL3008,DL3006

  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tags.outputs.tag }}
      deps_backend_tag: ${{ steps.set-tags.outputs.deps_backend_tag }}
      deps_test_tag: ${{ steps.set-tags.outputs.deps_test_tag }}
      deps_frontend_tag: ${{ steps.set-tags.outputs.deps_frontend_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all history for proper commit counting

      - name: Set tags
        id: set-tags
        run: |
          GIT_VERSION=$(git log -n1 --pretty='%h')
          TAG=${GIT_VERSION}-${{ github.run_id }}
          DEPS_BACKEND_COMMIT_HASH=$(git rev-list -1 HEAD -- compose/production/django requirements/)
          DEPS_BACKEND_COMMIT_COUNT=$(git rev-list --count "$DEPS_BACKEND_COMMIT_HASH")
          DEPS_TEST_COMMIT_HASH=$(git rev-list -1 HEAD -- compose/local/django requirements/)
          DEPS_TEST_COMMIT_COUNT=$(git rev-list --count "$DEPS_TEST_COMMIT_HASH")
          DEPS_FRONTEND_COMMIT_HASH=$(git rev-list -1 HEAD -- frontend/Dockerfile frontend/package.json frontend/yarn.lock)
          DEPS_FRONTEND_COMMIT_COUNT=$(git rev-list --count "$DEPS_FRONTEND_COMMIT_HASH")

          # Sanitize branch name by replacing slashes with dashes to make valid Docker tags
          SANITIZED_REF_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')

          DEPS_BACKEND_TAG="deps-${{ env.DEPS_STAMP }}-${DEPS_BACKEND_COMMIT_COUNT}-${DEPS_BACKEND_COMMIT_HASH}-${SANITIZED_REF_NAME}"
          DEPS_TEST_TAG="deps-${{ env.DEPS_STAMP }}-${DEPS_TEST_COMMIT_COUNT}-${DEPS_TEST_COMMIT_HASH}-${SANITIZED_REF_NAME}"
          DEPS_FRONTEND_TAG="deps-${{ env.DEPS_STAMP }}-${DEPS_FRONTEND_COMMIT_COUNT}-${DEPS_FRONTEND_COMMIT_HASH}-${SANITIZED_REF_NAME}"

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "deps_backend_tag=$DEPS_BACKEND_TAG" >> $GITHUB_OUTPUT
          echo "deps_test_tag=$DEPS_TEST_TAG" >> $GITHUB_OUTPUT
          echo "deps_frontend_tag=$DEPS_FRONTEND_TAG" >> $GITHUB_OUTPUT

  build-deps-images:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        include:
          - name: deps-backend
            dockerfile: ./compose/production/django/Dockerfile
            target: deps-backend-base
            tag: ${{ needs.prepare.outputs.deps_backend_tag }}
          - name: deps-test
            dockerfile: ./compose/local/django/Dockerfile
            target: deps-backend-base
            tag: ${{ needs.prepare.outputs.deps_test_tag }}
          - name: deps-frontend
            dockerfile: ./frontend/Dockerfile
            target: deps-frontend-base
            tag: ${{ needs.prepare.outputs.deps_frontend_tag }}
            context: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check_image
        run: |
          if docker manifest inspect ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.tag }} > /dev/null 2>&1; then
            echo "Image already exists, skipping build"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist, will build"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        uses: docker/build-push-action@v4
        if: steps.check_image.outputs.exists != 'true'
        with:
          context: ${{ matrix.context || '.' }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.tag }}
          target: ${{ matrix.target }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint-javascript:
    needs: [prepare, build-deps-images]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/deps-frontend:${{ needs.prepare.outputs.deps_frontend_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run lint and type checks
        working-directory: frontend
        run: |
          yarn
          yarn type-check
          yarn lint
          yarn format-check

  frontend-test:
    needs: [prepare, build-deps-images]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/deps-frontend:${{ needs.prepare.outputs.deps_frontend_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run frontend unit tests
        working-directory: frontend
        run: |
          yarn install
          yarn test:unit

  e2e-test:
    needs: [prepare, frontend-test, build-final-images]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/deps-frontend:${{ needs.prepare.outputs.deps_frontend_tag }}
    env:
      PLAYWRIGHT_BROWSERS_PATH: "0" # Restoring this, and adding new vars
      API_BASE_URL: http://backend:5000 # For frontend app to call backend
      # Variables for Django backend service container & this job container
      DJANGO_SETTINGS_MODULE: config.settings.test
      PYTHONUNBUFFERED: "1"
      CELERY_BROKER_URL: redis://redis:6379/0 # Dummy, add actual redis service if needed
      DJANGO_SECRET_KEY: "dummy-secret-key-for-ci-e2e-tests" # slightly different from lint-js error
      DJANGO_ALLOWED_HOSTS: ".localhost,backend,localhost"
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_PASSWORD: admin
      DJANGO_SUPERUSER_EMAIL: admin@example.com
      POSTGRES_DB: test_flash_e2e
      POSTGRES_HOST: db
      POSTGRES_PASSWORD: flash_e2e
      POSTGRES_PORT: 5432
      POSTGRES_USER: flash_e2e
      # PLAYWRIGHT_TEST_BASE_URL is handled by playwright.config.ts using CI env var
    services:
      db:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      backend:
        image: ghcr.io/${{ github.repository }}/backend:${{ needs.prepare.outputs.tag }}
        env: # These are passed to the backend service container
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
          PYTHONUNBUFFERED: ${{ env.PYTHONUNBUFFERED }}
          CELERY_BROKER_URL: ${{ env.CELERY_BROKER_URL }}
          DJANGO_SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
          DJANGO_ALLOWED_HOSTS: ${{ env.DJANGO_ALLOWED_HOSTS }}
          DJANGO_SUPERUSER_USERNAME: ${{ env.DJANGO_SUPERUSER_USERNAME }}
          DJANGO_SUPERUSER_PASSWORD: ${{ env.DJANGO_SUPERUSER_PASSWORD }}
          DJANGO_SUPERUSER_EMAIL: ${{ env.DJANGO_SUPERUSER_EMAIL }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
        ports: # Primarily for host access if needed; service-to-service uses Docker network
          - 5000:5000
        options: >-
          --health-cmd "python manage.py migrate"
          --health-start-period 30s
          --health-interval 30s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install wait-for-it and psql client
        run: |
          apt-get update -y && apt-get install -y --no-install-recommends wait-for-it postgresql-client

      - name: Wait for PostgreSQL
        run: wait-for-it -h db -p 5432 -t 60 --strict

      - name: Wait for Backend service
        run: wait-for-it -h backend -p 5000 -t 60 --strict

      - name: Run frontend e2e tests
        working-directory: frontend
        run: |
          yarn install
          yarn test:e2e

  build-final-images:
    needs: [prepare, build-deps-images]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        include:
          - name: backend
            dockerfile: ./compose/production/django/Dockerfile
            target: backend
            tag: ${{ needs.prepare.outputs.tag }}
            build_args: |
              APP_BASE_IMAGE=ghcr.io/${{ github.repository }}/deps-backend:${{ needs.prepare.outputs.deps_backend_tag }}
          - name: backend-test
            dockerfile: ./compose/local/django/Dockerfile
            target: backend
            tag: ${{ needs.prepare.outputs.tag }}
            build_args: |
              APP_BASE_IMAGE=ghcr.io/${{ github.repository }}/deps-test:${{ needs.prepare.outputs.deps_test_tag }}
          - name: frontend
            dockerfile: ./frontend/Dockerfile
            target: frontend
            tag: ${{ needs.prepare.outputs.tag }}
            context: ./frontend
            build_args: |
              FRONTEND_BASE_IMAGE=ghcr.io/${{ github.repository }}/deps-frontend:${{ needs.prepare.outputs.deps_frontend_tag }}
          - name: readability
            dockerfile: ./compose/local/readability/Dockerfile
            tag: ${{ needs.prepare.outputs.tag }}
            context: ./compose/local/readability
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context || '.' }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.tag }}
          target: ${{ matrix.target }}
          build-args: ${{ matrix.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint-python:
    needs: [prepare, build-final-images]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/backend-test:${{ needs.prepare.outputs.tag }}
      options: --entrypoint=""
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Add an exception for the current working directory
        run: git config --global --add safe.directory /__w/flash/flash

      - name: Run pre-commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

      - name: Upload pre-commit log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pre-commit-log
          path: /github/home/.cache/pre-commit/pre-commit.log

  backend-test:
    needs: [prepare, build-final-images]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/backend-test:${{ needs.prepare.outputs.tag }}
    services:
      db:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: test_${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: docker.io/redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      POSTGRES_USER: flash
      POSTGRES_PASSWORD: flash
      POSTGRES_HOST: db
      POSTGRES_DB: flash
      POSTGRES_PORT: 5432
      DATABASE_URL: postgres://flash:flash@db:5432/flash
      CELERY_BROKER_URL: redis://redis:6379/0
      USE_DOCKER: "yes"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup PostgreSQL
        run: |
          ls -l sql/
          wait-for-it "${POSTGRES_HOST}:${POSTGRES_PORT}" -t 30
          PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} test_${POSTGRES_DB} -f sql/00_tables.sql
          PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} test_${POSTGRES_DB} -f sql/01_feeds.sql
          PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} test_${POSTGRES_DB} -f sql/02_pgvector.sql

      - name: Run pytest
        run: /usr/local/bin/pytest

  tag-latest:
    if: github.ref == 'refs/heads/main'
    needs:
      [
        prepare,
        build-final-images,
        backend-test,
        lint-python,
        frontend-test,
        e2e-test,
      ]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag latest images
        run: |
          for I in backend frontend readability
          do
            IMAGE="ghcr.io/${{ github.repository }}/${I}"
            echo "Tagging ${IMAGE}:${{ needs.prepare.outputs.tag }}"
            docker buildx imagetools create --tag "${IMAGE}:latest" "${IMAGE}:${{ needs.prepare.outputs.tag }}"
            echo "🏷️ Tagged ${IMAGE}:latest"
          done

# Generated by Django 5.0.10 on 2025-01-23 14:11

from django.db import migrations


def create_views(apps, schema_editor):

    delete_views(apps, schema_editor)

    with schema_editor.connection.cursor() as cursor:
        cursor.execute("""
                       CREATE TABLE articles_data (
                            id integer NOT NULL UNIQUE,
                            views bigint NOT NULL DEFAULT 0,
                            rating numeric NOT NULL DEFAULT 0.0,
                            to_reads numeric NOT NULL DEFAULT 0.0,
                            length integer NOT NULL DEFAULT 0,
                            excerpt text DEFAULT ''
                        )""")

        cursor.execute("""
                       CREATE VIEW articles_combined AS (
                            SELECT
                                articles.*,
                                articles_data.views,
                                articles_data.rating,
                                articles_data.to_reads,
                                articles_data.length,
                                articles_data.excerpt
                            FROM
                                articles
                                JOIN articles_data ON articles.id = articles_data.id
                            )""")

        cursor.execute("""
                       CREATE VIEW articlelists_count_view AS
                            SELECT
                                articles.id as article_id,
                                COUNT(news_userarticlelists.user_id)
                            FROM
                                articles
                                JOIN news_articlelists ON articles.id = news_articlelists.article_id
                                JOIN news_userarticlelists ON news_articlelists.list_id = news_userarticlelists.id
                            WHERE NOT news_userarticlelists.automatic
                            GROUP BY articles.id
                            ORDER BY articles.id""")

        cursor.execute("""
                       CREATE VIEW articles_data_view AS
                            SELECT
                                articles.id,
                                COALESCE(COUNT(CASE WHEN news_userarticles.read THEN 1 END), 0) AS views,
                                COALESCE(AVG(news_userarticles.rating), 0) AS rating,
                                COALESCE(AVG(articlelists_count_view.count), 0) AS to_reads,
                                COALESCE(LENGTH(articles.content), LENGTH(articles.content_original)) as length,
                                SUBSTRING((CASE WHEN LENGTH(TRIM(articles.content))>0 THEN articles.content ELSE articles.content_original END) FOR 500) AS excerpt
                            FROM
                                articles
                                LEFT OUTER JOIN news_userarticles ON articles.id = news_userarticles.article_id
                                LEFT OUTER JOIN articlelists_count_view ON articles.id = articlelists_count_view.article_id
                            GROUP BY articles.id""")

        cursor.execute("""
                        CREATE TABLE feeds_data (
                            id integer NOT NULL UNIQUE,
                            last_polled_epoch double precision,
                            article_count bigint,
                            average_time_from_last_post integer
                        )""")
        cursor.execute("""
                       CREATE VIEW feeds_data_view AS
                            WITH aa AS (
                                SELECT articles.id,
                                articles.feed_id
                                FROM articles
                                GROUP BY articles.id
                            ), aaa AS (
                                SELECT feeds.id,
                                date_part('epoch'::text, feeds.last_polled) AS last_polled_epoch,
                                count(aa.*) AS article_count
                                FROM
                                feeds
                                LEFT JOIN aa ON (feeds.id = aa.feed_id)
                                GROUP BY feeds.id
                            ), diffs AS (
                                SELECT articles.feed_id,
                                (articles.stamp - lag(articles.stamp, 1) OVER (PARTITION BY articles.feed_id ORDER BY articles.stamp)) AS time_from_last_post
                                FROM articles
                                WHERE (date_part('epoch'::text, (now() - articles.stamp)) < (((3600 * 24) * 365))::double precision)
                            ), tflp AS (
                                SELECT diffs.feed_id,
                                (date_part('epoch'::text, avg(diffs.time_from_last_post)))::integer AS average_time_from_last_post
                                FROM diffs
                                GROUP BY diffs.feed_id
                            )
                            SELECT aaa.id,
                                aaa.last_polled_epoch,
                                aaa.article_count,
                                tflp.average_time_from_last_post
                            FROM (aaa
                                LEFT JOIN tflp ON ((aaa.id = tflp.feed_id)))
                            ORDER BY aaa.id""")
        cursor.execute("""
                       CREATE VIEW feeds_combined AS (
                            SELECT
                                feeds.*,
                                feeds_data.last_polled_epoch,
                                feeds_data.article_count,
                                feeds_data.average_time_from_last_post
                            FROM
                                feeds
                                JOIN feeds_data ON feeds.id = feeds_data.id)""")

        cursor.execute("INSERT INTO feeds_data SELECT feeds_data_view.* FROM feeds_data_view")

        cursor.execute("""
                       CREATE FUNCTION uad() RETURNS trigger AS $$
                            BEGIN
                                INSERT INTO articles_data
                                    SELECT articles_data_view.*
                                    FROM articles_data_view
                                    WHERE id = NEW.id
                                ON CONFLICT (id) DO UPDATE
                                    SET
                                        views = EXCLUDED.views,
                                        rating = EXCLUDED.rating,
                                        to_reads = EXCLUDED.to_reads,
                                        length = EXCLUDED.length,
                                        excerpt = EXCLUDED.excerpt;
                                RETURN NEW;
                            END;
                            $$ LANGUAGE plpgsql STRICT;
                        """)

        cursor.execute("CREATE TRIGGER update_articles_data AFTER INSERT OR UPDATE ON articles FOR EACH ROW EXECUTE FUNCTION uad()")

        cursor.execute("""
                       CREATE FUNCTION uad2() RETURNS trigger AS $$
                            BEGIN
                                INSERT INTO articles_data
                                    SELECT articles_data_view.*
                                    FROM articles_data_view
                                    WHERE id = NEW.article_id
                                ON CONFLICT (id) DO UPDATE
                                    SET
                                        views = EXCLUDED.views,
                                        rating = EXCLUDED.rating,
                                        to_reads = EXCLUDED.to_reads,
                                        length = EXCLUDED.length,
                                        excerpt = EXCLUDED.excerpt;
                                RETURN NEW;
                            END;
                            $$ LANGUAGE plpgsql STRICT;
                       """)

        cursor.execute("CREATE TRIGGER update_articles_data2 AFTER INSERT OR UPDATE ON news_userarticles FOR EACH ROW EXECUTE FUNCTION uad2()")

        cursor.execute("""
                       CREATE FUNCTION ufd() RETURNS trigger AS $$
                            BEGIN
                                RAISE NOTICE 'Ufd fired for article with ID: %', NEW.id;
                                INSERT INTO feeds_data
                                    SELECT feeds_data_view.*
                                    FROM feeds_data_view
                                    WHERE id = NEW.feed_id
                                ON CONFLICT (id) DO UPDATE
                                SET
                                    last_polled_epoch = EXCLUDED.last_polled_epoch,
                                    article_count = EXCLUDED.article_count,
                                    average_time_from_last_post = EXCLUDED.average_time_from_last_post;
                                RETURN NEW;
                            END;
                            $$ LANGUAGE plpgsql STRICT""")
        cursor.execute("CREATE TRIGGER update_feeds_data AFTER INSERT OR UPDATE ON articles FOR EACH ROW EXECUTE FUNCTION ufd()")

        cursor.execute("""
                       CREATE FUNCTION ufd2() RETURNS trigger AS $$
                            BEGIN
                                RAISE NOTICE 'Ufd fired for article with ID: %', NEW.id;
                                INSERT INTO feeds_data
                                    SELECT feeds_data_view.*
                                    FROM feeds_data_view
                                    WHERE id = NEW.id
                                ON CONFLICT (id) DO UPDATE
                                SET
                                    last_polled_epoch = EXCLUDED.last_polled_epoch,
                                    article_count = EXCLUDED.article_count,
                                    average_time_from_last_post = EXCLUDED.average_time_from_last_post;
                                RETURN NEW;
                            END;
                            $$ LANGUAGE plpgsql STRICT""")
        cursor.execute("CREATE TRIGGER update_feeds_data AFTER INSERT OR UPDATE ON feeds FOR EACH ROW EXECUTE FUNCTION ufd2()")

        cursor.execute("""
                        CREATE FUNCTION acu() RETURNS trigger AS $$
                            BEGIN
                                UPDATE articles
                                    SET
                                        title = NEW.title,
                                        title_original = NEW.title_original,
                                        author = NEW.author,
                                        language = NEW.language,
                                        url = NEW.url,
                                        content = NEW.content,
                                        content_original = NEW.content_original
                                    WHERE id = NEW.id;
                                RETURN NEW;
                            END;
                            $$ LANGUAGE plpgsql STRICT""")
        cursor.execute("CREATE TRIGGER articles_combined_update INSTEAD OF UPDATE ON articles_combined FOR EACH ROW EXECUTE FUNCTION acu()")


def delete_views(apps, schema_editor):

    with schema_editor.connection.cursor() as cursor:
        cursor.execute("DROP TRIGGER IF EXISTS update_articles_data ON articles")
        cursor.execute("DROP FUNCTION IF EXISTS uad")
        cursor.execute("DROP TRIGGER IF EXISTS update_articles_data2 ON news_userarticles")
        cursor.execute("DROP FUNCTION IF EXISTS uad2")
        cursor.execute("DROP TRIGGER IF EXISTS update_feeds_data ON articles")
        cursor.execute("DROP FUNCTION IF EXISTS ufd")
        cursor.execute("DROP TRIGGER IF EXISTS update_feeds_data ON feeds")
        cursor.execute("DROP FUNCTION IF EXISTS ufd2")
        cursor.execute("DROP TRIGGER IF EXISTS articles_combined_update ON articles_combined")
        cursor.execute("DROP FUNCTION IF EXISTS acu")
        cursor.execute("DROP VIEW IF EXISTS articles_combined")
        cursor.execute("DROP VIEW IF EXISTS feeds_combined")
        cursor.execute("DROP TABLE IF EXISTS articles_data")
        cursor.execute("DROP TABLE IF EXISTS feeds_data")
        cursor.execute("DROP VIEW IF EXISTS articles_data_view")
        cursor.execute("DROP VIEW IF EXISTS articlelists_count_view")
        cursor.execute("DROP VIEW IF EXISTS feeds_data_view")


class Migration(migrations.Migration):

    dependencies = [
        ('news', '0003_user_data'),
    ]

    operations = [
        migrations.RunPython(create_views, reverse_code=delete_views),
    ]

---
stages:
  - lint
  - prepare
  - build deps images
  - lint javascript
  - build final images
  - test
  - tag

variables:
  CI_DEBUG_SERVICES: "true"

precommit:
  stage: lint
  image: python:3.12
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    paths:
      - ${PRE_COMMIT_HOME}
  before_script:
    - pip install -q pre-commit
  script:
    - pre-commit run --show-diff-on-failure --color=always --all-files

lint-dockerfile:
  stage: lint
  image: hadolint/hadolint:latest-debian
  script:
    - hadolint --ignore DL3008 --ignore DL3006 compose/local/readability/Dockerfile
    - hadolint --ignore DL3008 --ignore DL3006 compose/production/django/Dockerfile
    - hadolint --ignore DL3008 --ignore DL3006 compose/local/django/Dockerfile
    - hadolint --ignore DL3008 --ignore DL3006 compose/production/nginx/Dockerfile
    - hadolint --ignore DL3008 --ignore DL3006 compose/production/postgres/Dockerfile
    - hadolint --ignore DL3008 --ignore DL3006 frontend/Dockerfile

prepare:
  stage: prepare
  image:
    name: alpine/git
    entrypoint: [""]
  variables:
    # disable shallow cloning or `git rev-list --count` used below won't work
    GIT_DEPTH: 0
  script:
    - GIT_VERSION=$(git log -n1 --pretty='%h')
    - TAG=${GIT_VERSION}-${CI_PIPELINE_ID}
    - DEPS_BACKEND_COMMIT_HASH=$(git rev-list -1 HEAD -- compose/production/django requirements/)
    - DEPS_BACKEND_COMMIT_COUNT=$(git rev-list --count "$DEPS_BACKEND_COMMIT_HASH")
    - DEPS_TEST_COMMIT_HASH=$(git rev-list -1 HEAD -- compose/local/django requirements/)
    - DEPS_TEST_COMMIT_COUNT=$(git rev-list --count "$DEPS_TEST_COMMIT_HASH")
    - DEPS_FRONTEND_COMMIT_HASH=$(git rev-list -1 HEAD -- frontend/Dockerfile frontend/package.json frontend/yarn.lock)
    - DEPS_FRONTEND_COMMIT_COUNT=$(git rev-list --count "$DEPS_FRONTEND_COMMIT_HASH")
    # yields tags like `deps-20201129-0-89-56fcfcc403a7-main` which ensure that
    # deps images are rebuilt when:
    #
    # 1. the DEPS_STAMP variable is bumped
    # 2. a new commit touches files under `compose/` or `requirements/` or `package.json` or `yarn.lock`
    #
    # otherwise existing images are re-used on a per-branch basis, skipping the
    # most time-consuming steps in the pipeline
    - DEPS_BACKEND_TAG="deps-${DEPS_STAMP}-${DEPS_BACKEND_COMMIT_COUNT}-${DEPS_BACKEND_COMMIT_HASH}-${CI_COMMIT_REF_SLUG}"
    - DEPS_TEST_TAG="deps-${DEPS_STAMP}-${DEPS_TEST_COMMIT_COUNT}-${DEPS_TEST_COMMIT_HASH}-${CI_COMMIT_REF_SLUG}"
    - DEPS_FRONTEND_TAG="deps-${DEPS_STAMP}-${DEPS_FRONTEND_COMMIT_COUNT}-${DEPS_FRONTEND_COMMIT_HASH}-${CI_COMMIT_REF_SLUG}"
    - echo "TAG=$TAG" | tee -a build-env.txt
    - echo "DEPS_BACKEND_TAG=$DEPS_BACKEND_TAG" | tee -a build-env.txt
    - echo "DEPS_TEST_TAG=$DEPS_TEST_TAG" | tee -a build-env.txt
    - echo "DEPS_FRONTEND_TAG=$DEPS_FRONTEND_TAG" | tee -a build-env.txt
  artifacts:
    reports:
      dotenv: build-env.txt

.build-docker-image:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    CONTEXT: .
    ARGS: ""
  script:
    - TAG="${JOB_TAG:-${TAG}}"
    - mkdir -p /kaniko/.docker/
    # makes use of Gitlab's Predefined environment variables, see:
    # https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
    - echo "CI_REGISTRY = $CI_REGISTRY"
    - echo "CI_REGISTRY_USER = $CI_REGISTRY_USER"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir /kaniko/tmp/
    - echo "FROM $REPO:$TAG" > /kaniko/tmp/Dockerfile
    - |
      if /kaniko/executor --context=/kaniko/tmp --verbosity=panic --no-push
      then
        echo "‚è© Image $REPO:$TAG already exists, skip rebuilding it"
        exit 0
      else
        echo "üë∑ Image $REPO:$TAG not found, build it"
      fi
    - set -x;
      /kaniko/executor
      --context "$CONTEXT"
      --dockerfile "$DOCKERFILE"
      --destination "$REPO:$TAG"
      $ARGS
      --skip-unused-stages;
      set +x
    - echo "‚úÖ Pushed $REPO:$TAG"

build-docker-image-deps-backend:
  extends: .build-docker-image
  stage: build deps images
  variables:
    DOCKERFILE: ./compose/production/django/Dockerfile
    REPO: $CI_REGISTRY_IMAGE/deps-backend
    JOB_TAG: $DEPS_BACKEND_TAG
    ARGS: --target deps-backend-base

build-docker-image-deps-test:
  extends: .build-docker-image
  stage: build deps images
  variables:
    DOCKERFILE: ./compose/local/django/Dockerfile
    REPO: $CI_REGISTRY_IMAGE/deps-test
    JOB_TAG: $DEPS_TEST_TAG
    ARGS: --target deps-backend-base

build-docker-image-deps-frontend:
  extends: .build-docker-image
  stage: build deps images
  variables:
    DOCKERFILE: ./frontend/Dockerfile
    REPO: $CI_REGISTRY_IMAGE/deps-frontend
    JOB_TAG: $DEPS_FRONTEND_TAG
    CONTEXT: ./frontend
    ARGS: --target deps-frontend-base

lint-javascript:
  stage: lint javascript
  image: $CI_REGISTRY_IMAGE/deps-frontend:$DEPS_FRONTEND_TAG
  before_script:
    - cd frontend/
    - yarn
  script:
    - yarn type-check
    - yarn lint
    - yarn format-check

build-docker-image-backend:
  extends: .build-docker-image
  stage: build final images
  variables:
    DOCKERFILE: ./compose/production/django/Dockerfile
    REPO: $CI_REGISTRY_IMAGE/backend
    ARGS: --target backend
      --build-arg APP_BASE_IMAGE=$CI_REGISTRY_IMAGE/deps-backend:$DEPS_BACKEND_TAG

build-docker-image-backend-test:
  extends: .build-docker-image
  stage: build final images
  variables:
    DOCKERFILE: ./compose/local/django/Dockerfile
    REPO: $CI_REGISTRY_IMAGE/backend-test
    ARGS: --target backend
      --build-arg APP_BASE_IMAGE=$CI_REGISTRY_IMAGE/deps-test:$DEPS_TEST_TAG

build-docker-image-frontend:
  extends: .build-docker-image
  stage: build final images
  variables:
    DOCKERFILE: ./frontend/Dockerfile
    REPO: $CI_REGISTRY_IMAGE/frontend
    CONTEXT: ./frontend
    ARGS: --target frontend
      --build-arg FRONTEND_BASE_IMAGE=$CI_REGISTRY_IMAGE/deps-frontend:$DEPS_FRONTEND_TAG

build-docker-image-readability:
  extends: .build-docker-image
  stage: build final images
  variables:
    DOCKERFILE: ./compose/local/readability/Dockerfile
    REPO: $CI_REGISTRY_IMAGE/readability
    CONTEXT: ./compose/local/readability

build-docker-image-postgres:
  extends: .build-docker-image
  stage: build final images
  variables:
    DOCKERFILE: ./compose/production/postgres/Dockerfile
    REPO: $CI_REGISTRY_IMAGE/postgres
    CONTEXT: .

lint-python:
  stage: test
  image:
    name: $CI_REGISTRY_IMAGE/backend-test:$TAG
    entrypoint: [""]
  script:
    - pre-commit run --show-diff-on-failure --color=always --all-files

backend-test:
  stage: test
  image:
    name: $CI_REGISTRY_IMAGE/backend-test:$TAG
  variables:
    POSTGRES_USER: flash
    POSTGRES_PASSWORD: flash
    POSTGRES_HOST: db
    POSTGRES_DB: flash
    POSTGRES_PORT: 5432
    DATABASE_URL: postgres://flash:flash@db:5432/flash
    CELERY_BROKER_URL: redis://redis:6379/0
    USE_DOCKER: "yes"
  services:
    - name: $CI_REGISTRY_IMAGE/postgres:$TAG
      alias: db
      variables:
        POSTGRES_DB: test_flash
    - name: docker.io/redis:6
      alias: redis
  before_script:
    - wait-for-it "${POSTGRES_HOST}:${POSTGRES_PORT}" -t 30
  script:
    - /usr/local/bin/pytest

frontend-test:
  stage: test
  image: $CI_REGISTRY_IMAGE/deps-frontend:$DEPS_FRONTEND_TAG
  script:
    - cd frontend/
    - yarn install
    - yarn test:unit --reporter=verbose --reporter=html
  artifacts:
    paths:
      - frontend/html/
    when: always
    expire_in: 1 week

e2e-test:
  stage: test
  image: $CI_REGISTRY_IMAGE/deps-frontend:$DEPS_FRONTEND_TAG
  variables:
    PLAYWRIGHT_BROWSERS_PATH: "0"
    DATABASE_URL: postgresql://flash_e2e:flash_e2e@db:5432/test_flash_e2e
    DJANGO_SETTINGS_MODULE: config.settings.test
    PYTHONUNBUFFERED: "1"
    CELERY_BROKER_URL: redis://redis:6379/0
    DJANGO_SECRET_KEY: "dummy-secret-key-for-ci-e2e-tests"
    DJANGO_ALLOWED_HOSTS: "django,flash"
    DJANGO_SUPERUSER_USERNAME: admin
    DJANGO_SUPERUSER_PASSWORD: admin
    DJANGO_SUPERUSER_EMAIL: admin@example.com
    POSTGRES_DB: test_flash_e2e
    POSTGRES_HOST: db
    POSTGRES_PASSWORD: flash_e2e
    POSTGRES_PORT: 5432
    POSTGRES_USER: flash_e2e
    # PLAYWRIGHT_TEST_BASE_URL is handled by playwright.config.ts using CI env var
  services:
    - name: $CI_REGISTRY_IMAGE/postgres:$TAG
      alias: db
    - name: docker.io/redis:6
      alias: redis
    - name: $CI_REGISTRY_IMAGE/backend:$TAG
      alias: django
    - name: $CI_REGISTRY_IMAGE/frontend:$TAG
      alias: flash
  before_script:
    - apt-get update -y && apt-get install -y --no-install-recommends wait-for-it
    - wait-for-it "${POSTGRES_HOST}:${POSTGRES_PORT}" -t 30
    - wait-for-it -h django -p 5000 -t 60 --strict
    - wait-for-it -h flash -p 80 -t 60 --strict
    - mkdir screenshots
  script:
    - cd frontend
    - pwd
    - whoami
    - ls -l /root/.cache/ms-playwright
    - du -sh /root/.cache/ms-playwright
    - ln -s /app/node_modules/ node_modules
    - yarn playwright install
    - yarn test:e2e
  artifacts:
    paths:
      - frontend/playwright-report/
      - frontend/screenshots/
      - frontend/test-results/
    when: always
    expire_in: 1 week

tag-latest-docker-images:
  stage: tag
  image: debian:bookworm-slim
  before_script:
    - apt update && apt install -y --no-install-recommends
      skopeo
      openssh-client
      ca-certificates
  variables:
    AUTH: $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD
    TAG_NEW: latest
    TAG: $CI_COMMIT_SHORT_SHA
  script:
    - |
      for I in backend frontend readability
      do
        IMAGE="${CI_REGISTRY_IMAGE}/${I}"
        echo Tagging "${IMAGE}:${TAG}"
        skopeo copy --src-creds "$AUTH" --dest-creds "$AUTH" docker://"${IMAGE}:${TAG}" docker://"${IMAGE}:${TAG_NEW}"
        echo üè∑Ô∏è Tagged "${IMAGE}:${TAG_NEW}"
      done
  rules:
    - if: "$CI_MERGE_REQUEST_ID"
      when: never
    - if: "$CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH"
      when: on_success
    - when: never
